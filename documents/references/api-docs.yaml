openapi: 3.1.0
info:
  title: Project API
  version: "1.1.0"
  description: API for managing software project function point calculations
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: Project Management
    description: Endpoints for managing projects
  - name: User Management
    description: Endpoints for managing user accounts
  - name: Functional Components
    description: Endpoints for managing functional components within projects
  - name: Token Generation
    description: Endpoint for generating token
paths:
  /projects/{id}:
    get:
      tags:
        - Project Management
      summary: Get a project by ID
      description:
        Retrieves a specific project if the authenticated user has access
        to it
      operationId: getProject
      parameters:
        - name: id
          in: path
          description: ID of the project to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Project found and returned
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ProjectResponse"
        "404":
          description: Project not found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ProjectResponse"
        "403":
          description: User does not have access to this project
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ProjectResponse"
      security:
        - bearerAuth: []
    put:
      tags:
        - Project Management
      summary: Update a project
      description: Updates an existing project if the authenticated user owns it
      operationId: updateProject
      parameters:
        - name: id
          in: path
          description: ID of the project to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
        required: true
      responses:
        "200":
          description: Project updated successfully
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ProjectResponse"
        "404":
          description: Project not found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ProjectResponse"
        "403":
          description: User does not have permission to update this project
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ProjectResponse"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Project Management
      summary: Delete a project
      description: Deletes a project if the authenticated user owns it
      operationId: deleteProject
      parameters:
        - name: id
          in: path
          description: ID of the project to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Project deleted successfully
        "404":
          description: Project not found
        "403":
          description: User does not have permission to delete this project
      security:
        - bearerAuth: []
  /appusers/password:
    put:
      tags:
        - User Management
      summary: Change user password
      description: Allows authenticated users to change their password
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChangeRequest"
        required: true
      responses:
        "200":
          description: Password changed successfully
          content:
            "*/*":
              schema:
                type: string
        "400":
          description: Invalid password format
          content:
            "*/*":
              schema:
                type: string
        "401":
          description: User not authenticated
          content:
            "*/*":
              schema:
                type: string
      security:
        - bearerAuth: []
  /token:
    post:
      tags:
        - Token Generation
      summary: Generate a JWT
      description: Generates a signed JWT for an authenticated user
      operationId: getToken
      responses:
        "200":
          description: Token generated successfully
          content:
            "*/*":
              schema:
                type: object
        "401":
          description: User not authenticated
          content:
            "*/*":
              schema:
                type: object
        "500":
          description: Failed to encode the token
          content:
            "*/*":
              schema:
                type: object
  /projects:
    get:
      tags:
        - Project Management
      summary: Get all projects
      description: Retrieves all projects accessible to the authenticated user
      operationId: getAllProjects
      responses:
        "200":
          description: List of projects returned
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectResponse"
      security:
        - bearerAuth: []
    post:
      tags:
        - Project Management
      summary: Create a new project
      description: Creates a new project for the authenticated user
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
        required: true
      responses:
        "201":
          description: Project created successfully
        "400":
          description: Invalid project data
      security:
        - bearerAuth: []
  /projects/{id}/versions:
    post:
      tags:
        - Project Management
      summary: Create a new version of a project
      description: Creates a new version of an existing project
      operationId: createProjectVersion
      parameters:
        - name: id
          in: path
          description: ID of the project to version
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
        required: true
      responses:
        "201":
          description: Project version created successfully
        "404":
          description: Original project not found
        "403":
          description: User does not have permission
      security:
        - bearerAuth: []
  /functional-components/projects/{projectId}:
    post:
      tags:
        - Functional Components
      summary: Create a new functional component
      description: Creates a new functional component in the specified project
      operationId: createFunctionalComponent
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FunctionalComponentRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ProjectResponse"
      security:
        - bearerAuth: []
  /functional-components/{componentId}/projects/{projectId}:
    delete:
      tags:
        - Functional Components
      summary: Delete a functional component
      description: Deletes a functional component from the specified project
      operationId: deleteFunctionalComponent
      parameters:
        - name: componentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ProjectResponse"
      security:
        - bearerAuth: []
  /appusers:
    delete:
      tags:
        - User Management
      summary: Delete user account
      description: Permanently deletes the authenticated user's account
      operationId: deleteAppUser
      responses:
        "204":
          description: Account deleted successfully
        "401":
          description: User not authenticated
      security:
        - bearerAuth: []
components:
  schemas:
    FunctionalComponentRequest:
      type: object
      description:
        Request object for creating or updating functional components within
        a project
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier
          example: 1
        title:
          type: string
          description: Title of the functional component
          example: Create User Account
          maxLength: 255
          minLength: 0
        description:
          type: string
          description: Detailed description of the functional component
          example: Handles user account creation process
          maxLength: 1000
          minLength: 0
        className:
          type: string
          description: Name of the class
          example: UserAccount
          maxLength: 255
          minLength: 0
        componentType:
          type: string
          description: Type of the functional component
        dataElements:
          type: integer
          format: int32
          description: Number of data elements
          example: 5
          minimum: 0
        readingReferences:
          type: integer
          format: int32
          description: Number of reading references
          example: 2
          minimum: 0
        writingReferences:
          type: integer
          format: int32
          description: Number of writing references
          example: 1
          minimum: 0
        functionalMultiplier:
          type: integer
          format: int32
          description: Multiplier for functional points calculation
          example: 3
          minimum: 1
        operations:
          type: integer
          format: int32
          description: Number of operations
          example: 4
          minimum: 0
        degreeOfCompletion:
          type: number
          format: double
          description: Completion status (0.0 to 1.0)
          example: 0.75
          maximum: 1.0
          minimum: 0.0
        previousFCId:
          type: integer
          format: int64
          description: ID of the previous functional component for ordering
          example: 123
        orderPosition:
          type: integer
          format: int32
          description: Position in the component list
          example: 1
          minimum: 0
      required:
        - orderPosition
    ProjectRequest:
      type: object
      description: Request object for creating or updating a project
      properties:
        projectName:
          type: string
          description: Name of the project
          example: User Authentication System
          maxLength: 255
          minLength: 0
        version:
          type: integer
          format: int32
          description: Version of the project
          example: 1
        functionalComponents:
          type: array
          description: List of functional components in the project
          items:
            $ref: "#/components/schemas/FunctionalComponentRequest"
          uniqueItems: true
        projectAppUserIds:
          type: array
          description: List of user IDs to associate with the project
          items:
            type: integer
            format: int64
          uniqueItems: true
      required:
        - projectName
        - version
    AppUserSummary:
      type: object
      description: Summary information about an application user
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the user
          example: 1
        username:
          type: string
          description: Username of the user
          example: john.doe
          maxLength: 50
    FunctionalComponentResponse:
      type: object
      description:
        Response object containing details on functional components within
        a project
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier
          example: 1
        title:
          type: string
          description: Title of the functional component
          example: Create User Account
        description:
          type: string
          description: Detailed description of the functional component
        className:
          type: string
          description: Name of the class
          example: UserAccount
        componentType:
          type: string
          description: Type of the functional component
        dataElements:
          type: integer
          format: int32
          description: Number of data elements
          example: 5
          minimum: 0
        readingReferences:
          type: integer
          format: int32
          description: Number of reading references
          example: 2
          minimum: 0
        writingReferences:
          type: integer
          format: int32
          description: Number of writing references
          example: 1
          minimum: 0
        functionalMultiplier:
          type: integer
          format: int32
          description: Multiplier for functional points calculation
          example: 3
          minimum: 1
        operations:
          type: integer
          format: int32
          description: Number of operations
          example: 4
          minimum: 0
        degreeOfCompletion:
          type: number
          format: double
          description: Completion status (0.0 to 1.0)
          example: 0.75
          maximum: 1
          minimum: 0
        previousFCId:
          type: integer
          format: int64
          description: ID of the previous functional component for ordering
          example: 123
        orderPosition:
          type: integer
          format: int32
          description: Position in the component list
          example: 1
          minimum: 0
    ProjectAppUserResponse:
      type: object
      description: Response object containing project-user relationship details
      properties:
        id:
          type: integer
          format: int64
          description: ID of the project-user relationship
          example: 1
        appUser:
          $ref: "#/components/schemas/AppUserSummary"
          description: AppUser details
    ProjectResponse:
      type: object
      description: Response object containing project details
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the project
          example: 1
        projectName:
          type: string
          description: Name of the project
          example: User Authentication Service
        version:
          type: integer
          format: int32
          description: Version of the project
          example: 1
        totalPoints:
          type: number
          format: double
          description: Total function points of the project
          example: 150.5
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: 2025-09-25T10:30:00
        versionCreatedAt:
          type: string
          format: date-time
          description: Last version update timestamp
          example: 2025-09-25T15:45:00
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: 2025-09-25T15:45:00
        functionalComponents:
          type: array
          description: Functional components in the project
          items:
            $ref: "#/components/schemas/FunctionalComponentResponse"
          uniqueItems: true
        projectAppUsers:
          type: array
          description: Users associated with the project
          items:
            $ref: "#/components/schemas/ProjectAppUserResponse"
          uniqueItems: true
    PasswordChangeRequest:
      type: object
      description: Request object containing details on password change
      properties:
        newPassword:
          type: string
          maxLength: 64
          minLength: 0
      required:
        - newPassword
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
